// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: proto/replogrpc.proto

package replogrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RepLogService_AppendEntryRPC_FullMethodName = "/replogrpc.RepLogService/AppendEntryRPC"
)

// RepLogServiceClient is the client API for RepLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepLogServiceClient interface {
	AppendEntryRPC(ctx context.Context, in *AppendEntry, opts ...grpc.CallOption) (*AppendEntryResponse, error)
}

type repLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRepLogServiceClient(cc grpc.ClientConnInterface) RepLogServiceClient {
	return &repLogServiceClient{cc}
}

func (c *repLogServiceClient) AppendEntryRPC(ctx context.Context, in *AppendEntry, opts ...grpc.CallOption) (*AppendEntryResponse, error) {
	out := new(AppendEntryResponse)
	err := c.cc.Invoke(ctx, RepLogService_AppendEntryRPC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepLogServiceServer is the server API for RepLogService service.
// All implementations must embed UnimplementedRepLogServiceServer
// for forward compatibility
type RepLogServiceServer interface {
	AppendEntryRPC(context.Context, *AppendEntry) (*AppendEntryResponse, error)
	mustEmbedUnimplementedRepLogServiceServer()
}

// UnimplementedRepLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRepLogServiceServer struct {
}

func (UnimplementedRepLogServiceServer) AppendEntryRPC(context.Context, *AppendEntry) (*AppendEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntryRPC not implemented")
}
func (UnimplementedRepLogServiceServer) mustEmbedUnimplementedRepLogServiceServer() {}

// UnsafeRepLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepLogServiceServer will
// result in compilation errors.
type UnsafeRepLogServiceServer interface {
	mustEmbedUnimplementedRepLogServiceServer()
}

func RegisterRepLogServiceServer(s grpc.ServiceRegistrar, srv RepLogServiceServer) {
	s.RegisterService(&RepLogService_ServiceDesc, srv)
}

func _RepLogService_AppendEntryRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepLogServiceServer).AppendEntryRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepLogService_AppendEntryRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepLogServiceServer).AppendEntryRPC(ctx, req.(*AppendEntry))
	}
	return interceptor(ctx, in, info, handler)
}

// RepLogService_ServiceDesc is the grpc.ServiceDesc for RepLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RepLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "replogrpc.RepLogService",
	HandlerType: (*RepLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendEntryRPC",
			Handler:    _RepLogService_AppendEntryRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/replogrpc.proto",
}
