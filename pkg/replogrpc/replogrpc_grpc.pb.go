// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: proto/replogrpc.proto

package replogrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RepLogService_AppendEntryRPC_FullMethodName = "/replogrpc.RepLogService/AppendEntryRPC"
)

// RepLogServiceClient is the client API for RepLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepLogServiceClient interface {
	AppendEntryRPC(ctx context.Context, opts ...grpc.CallOption) (RepLogService_AppendEntryRPCClient, error)
}

type repLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRepLogServiceClient(cc grpc.ClientConnInterface) RepLogServiceClient {
	return &repLogServiceClient{cc}
}

func (c *repLogServiceClient) AppendEntryRPC(ctx context.Context, opts ...grpc.CallOption) (RepLogService_AppendEntryRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &RepLogService_ServiceDesc.Streams[0], RepLogService_AppendEntryRPC_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &repLogServiceAppendEntryRPCClient{stream}
	return x, nil
}

type RepLogService_AppendEntryRPCClient interface {
	Send(*AppendEntry) error
	Recv() (*AppendEntryResponse, error)
	grpc.ClientStream
}

type repLogServiceAppendEntryRPCClient struct {
	grpc.ClientStream
}

func (x *repLogServiceAppendEntryRPCClient) Send(m *AppendEntry) error {
	return x.ClientStream.SendMsg(m)
}

func (x *repLogServiceAppendEntryRPCClient) Recv() (*AppendEntryResponse, error) {
	m := new(AppendEntryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RepLogServiceServer is the server API for RepLogService service.
// All implementations must embed UnimplementedRepLogServiceServer
// for forward compatibility
type RepLogServiceServer interface {
	AppendEntryRPC(RepLogService_AppendEntryRPCServer) error
	mustEmbedUnimplementedRepLogServiceServer()
}

// UnimplementedRepLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRepLogServiceServer struct {
}

func (UnimplementedRepLogServiceServer) AppendEntryRPC(RepLogService_AppendEntryRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method AppendEntryRPC not implemented")
}
func (UnimplementedRepLogServiceServer) mustEmbedUnimplementedRepLogServiceServer() {}

// UnsafeRepLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepLogServiceServer will
// result in compilation errors.
type UnsafeRepLogServiceServer interface {
	mustEmbedUnimplementedRepLogServiceServer()
}

func RegisterRepLogServiceServer(s grpc.ServiceRegistrar, srv RepLogServiceServer) {
	s.RegisterService(&RepLogService_ServiceDesc, srv)
}

func _RepLogService_AppendEntryRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RepLogServiceServer).AppendEntryRPC(&repLogServiceAppendEntryRPCServer{stream})
}

type RepLogService_AppendEntryRPCServer interface {
	Send(*AppendEntryResponse) error
	Recv() (*AppendEntry, error)
	grpc.ServerStream
}

type repLogServiceAppendEntryRPCServer struct {
	grpc.ServerStream
}

func (x *repLogServiceAppendEntryRPCServer) Send(m *AppendEntryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *repLogServiceAppendEntryRPCServer) Recv() (*AppendEntry, error) {
	m := new(AppendEntry)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RepLogService_ServiceDesc is the grpc.ServiceDesc for RepLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RepLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "replogrpc.RepLogService",
	HandlerType: (*RepLogServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AppendEntryRPC",
			Handler:       _RepLogService_AppendEntryRPC_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/replogrpc.proto",
}
