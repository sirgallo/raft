// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: proto/forwardresprpc.proto

package forwardresprpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ForwardRespService_ForwardRespRPC_FullMethodName = "/forwardresprpc.ForwardRespService/ForwardRespRPC"
)

// ForwardRespServiceClient is the client API for ForwardRespService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForwardRespServiceClient interface {
	ForwardRespRPC(ctx context.Context, in *ForwardRespRequest, opts ...grpc.CallOption) (*ForwardRespResponse, error)
}

type forwardRespServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewForwardRespServiceClient(cc grpc.ClientConnInterface) ForwardRespServiceClient {
	return &forwardRespServiceClient{cc}
}

func (c *forwardRespServiceClient) ForwardRespRPC(ctx context.Context, in *ForwardRespRequest, opts ...grpc.CallOption) (*ForwardRespResponse, error) {
	out := new(ForwardRespResponse)
	err := c.cc.Invoke(ctx, ForwardRespService_ForwardRespRPC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForwardRespServiceServer is the server API for ForwardRespService service.
// All implementations must embed UnimplementedForwardRespServiceServer
// for forward compatibility
type ForwardRespServiceServer interface {
	ForwardRespRPC(context.Context, *ForwardRespRequest) (*ForwardRespResponse, error)
	mustEmbedUnimplementedForwardRespServiceServer()
}

// UnimplementedForwardRespServiceServer must be embedded to have forward compatible implementations.
type UnimplementedForwardRespServiceServer struct {
}

func (UnimplementedForwardRespServiceServer) ForwardRespRPC(context.Context, *ForwardRespRequest) (*ForwardRespResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardRespRPC not implemented")
}
func (UnimplementedForwardRespServiceServer) mustEmbedUnimplementedForwardRespServiceServer() {}

// UnsafeForwardRespServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForwardRespServiceServer will
// result in compilation errors.
type UnsafeForwardRespServiceServer interface {
	mustEmbedUnimplementedForwardRespServiceServer()
}

func RegisterForwardRespServiceServer(s grpc.ServiceRegistrar, srv ForwardRespServiceServer) {
	s.RegisterService(&ForwardRespService_ServiceDesc, srv)
}

func _ForwardRespService_ForwardRespRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardRespRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardRespServiceServer).ForwardRespRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForwardRespService_ForwardRespRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardRespServiceServer).ForwardRespRPC(ctx, req.(*ForwardRespRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ForwardRespService_ServiceDesc is the grpc.ServiceDesc for ForwardRespService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ForwardRespService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "forwardresprpc.ForwardRespService",
	HandlerType: (*ForwardRespServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ForwardRespRPC",
			Handler:    _ForwardRespService_ForwardRespRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/forwardresprpc.proto",
}
